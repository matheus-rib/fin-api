{
	"Default Nest Module": {
		"prefix": "nmodule",
		"scope": "typescript",
		"body": [
			"import { Module } from '@nestjs/common'",
			"import { ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Controller } from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}.controller'",
			"import { ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Provider } from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}.provider'",
			"",
			"@Module({",
			"  controllers: [${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Controller],",
			"  providers: [${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Provider],",
			"})",
			"export class ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Module {}",
			""
		],
		"description": "Creates a default Nest module"
	},
	"Default Nest Provider": {
		"prefix": "nprovider",
		"body": [
			"import { Injectable } from '@nestjs/common'",
			"import { PaginatedList } from '../../shared/paginatedList/types'",
			"import { QueryString } from '../../shared/types'",
			"import { Create${1/(.*)$/${1:/capitalize}/}DTO } from './dto/Create${1/(.*)$/${1:/capitalize}/}DTO'",
			"import { Edit${1/(.*)$/${1:/capitalize}/}DTO } from './dto/Edit${1/(.*)$/${1:/capitalize}/}DTO'",
			"import { ${1/(.*)$/${1:/capitalize}/} } from './entities/${1}.entity'",
			"",
			"@Injectable()",
			"export class ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Provider {",
			"  async index (query: QueryString<${1/(.*)$/${1:/capitalize}/}>): Promise<PaginatedList<${1/(.*)$/${1:/capitalize}/}>> {}",
			"",
			"  async show (${1}Id: number): Promise<${1/(.*)$/${1:/capitalize}/}> {}",
			"",
			"  async store (createTransactionDto: Create${1/(.*)$/${1:/capitalize}/}DTO): Promise<${1/(.*)$/${1:/capitalize}/}> {}",
			"",
			"  async edit (${1}Id: number, editTransactionDto: Edit${1/(.*)$/${1:/capitalize}/}DTO): Promise<${1/(.*)$/${1:/capitalize}/}> {}",
			"",
			"  async delete (${1}Id: number): Promise<void> {}",
			"}",
			""
		],
		"description": "Creates a default Nest Provider"
	},
	"Default Nest Controller": {
		"prefix": "ncontroller",
		"body": [
			"import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Param, Post, Put, Query } from '@nestjs/common'",
			"import { ApiCreatedResponse, ApiInternalServerErrorResponse, ApiNoContentResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags, ApiUnprocessableEntityResponse } from '@nestjs/swagger'",
			"import { PaginatedList } from '../../shared/paginatedList/types'",
			"import { QueryString } from '../../shared/types'",
			"import { Create${1/(.*)$/${1:/capitalize}/}DTO } from './dto/Create${1/(.*)$/${1:/capitalize}/}DTO'",
			"import { Edit${1/(.*)$/${1:/capitalize}/}DTO } from './dto/Edit${1/(.*)$/${1:/capitalize}/}DTO'",
			"import { ${1/(.*)$/${1:/capitalize}/} } from './entities/${1}.entity'",
			"import { ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Provider } from './${TM_DIRECTORY/^.+\\/(.*)$/$1/}.provider'",
			"import UnprocessableEntitySchema from '../../shared/responses/schema/UnprocessableEntitySchema'",
			"import paginatedListSchema from '../../shared/responses/schema/paginatedListSchema'",
			"import { NotFoundDTO } from '../../shared/responses/dto/NotFoundDTO'",
			"",
			"@ApiTags('${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}')",
			"@Controller('${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}')",
			"export class ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Controller {",
			"  constructor (private ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider: ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}Provider) {",
			"    this.${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider = ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider",
			"  }",
			"",
			"  @ApiOkResponse({ description: 'The found records.', schema: paginatedListSchema(${1/(.*)$/${1:/capitalize}/}) })",
			"  @ApiOperation({ description: 'Retrieve many ${TM_DIRECTORY/^.+\\/(.*)$/${1:/capitalize}/}.' })",
			"  @Get()",
			"  async index (@Query() query: QueryString<${1/(.*)$/${1:/capitalize}/}>): Promise<PaginatedList<${1/(.*)$/${1:/capitalize}/}>> {",
			"    return this.${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider.index(query)",
			"  }",
			"",
			"  @ApiOkResponse({ description: 'Retrieve the ${1} by the Id.', type: ${1/(.*)$/${1:/capitalize}/} })",
			"  @ApiNotFoundResponse({ description: '${1/(.*)$/${1:/capitalize}/} not found.', type: NotFoundDTO })",
			"  @ApiOperation({ description: 'Retrieve a single ${1/(.*)$/${1:/capitalize}/}.' })",
			"  @Get(':${1}Id')",
			"  async show (@Param('${1}Id') ${1}Id: number): Promise<${1/(.*)$/${1:/capitalize}/}> {",
			"    return this.${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider.show(${1}Id)",
			"  }",
			"",
			"  @Post()",
			"  @ApiCreatedResponse({ description: 'Retrieve the created ${1}', type: ${1/(.*)$/${1:/capitalize}/} })",
			"  @ApiUnprocessableEntityResponse({ description: 'Occurred errors trying to create ${1}.', schema: UnprocessableEntitySchema() })",
			"  @ApiOperation({ description: 'Create an ${1/(.*)$/${1:/capitalize}/}.' })",
			"  async store (@Body() create${1/(.*)$/${1:/capitalize}/}DTO: Create${1/(.*)$/${1:/capitalize}/}DTO): Promise<${1/(.*)$/${1:/capitalize}/}> {",
			"    return this.${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider.store(create${1/(.*)$/${1:/capitalize}/}DTO)",
			"  }",
			"",
			"  @Put(':${1}Id')",
			"  @ApiOkResponse({ description: 'Retrieve the updated ${1}', type: ${1/(.*)$/${1:/capitalize}/} })",
			"  @ApiUnprocessableEntityResponse({ description: 'Occurred errors trying to update ${1}.', schema: UnprocessableEntitySchema() })",
			"  @ApiNotFoundResponse({ description: '${1/(.*)$/${1:/capitalize}/} not found.', type: NotFoundDTO })",
			"  @ApiOperation({ description: 'Update an ${1/(.*)$/${1:/capitalize}/}.' })",
			"  async edit (@Param('${1}Id') ${1}Id: number, @Body() edit${1/(.*)$/${1:/capitalize}/}DTO: Edit${1/(.*)$/${1:/capitalize}/}DTO): Promise<${1/(.*)$/${1:/capitalize}/}> {",
			"    return this.${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider.edit(${1}Id, edit${1/(.*)$/${1:/capitalize}/}DTO)",
			"  }",
			"",
			"  @Delete(':${1}Id')",
			"  @ApiNoContentResponse({ description: 'No body' })",
			"  @ApiInternalServerErrorResponse({ description: 'Occurred errors trying to delete used' })",
			"  @ApiNotFoundResponse({ description: '${1/(.*)$/${1:/capitalize}/} not found.', type: NotFoundDTO })",
			"  @ApiOperation({ description: 'Delete an ${1/(.*)$/${1:/capitalize}/}.' })",
			"  @HttpCode(HttpStatus.NO_CONTENT)",
			"  async delete (@Param('${1}Id') ${1}Id: number): Promise<void> {",
			"    return this.${TM_DIRECTORY/^.+\\/(.*)$/$1/}Provider.delete(${1}Id)",
			"  }",
			"}",
			""
		],
		"description": "Creates a default Nest controller"
	},
	"TypeORM Base Entity": {
		"prefix": "tentity",
		"body": [
			"import { Entity } from 'typeorm'",
			"import { Model } from '../../../shared/orm/Entity'",
			"",
			"@Entity('${TM_FILENAME_BASE/.entity//g}s')",
			"export class ${TM_FILENAME_BASE/(\\w+)(?:-|\\.\\w+$)/${1:/capitalize}/g} extends Model {}",
			""
		],
		"description": "Creates a base TypeORM entity"
	}
}